a.
(define (make-mobile left right)
(list left right))
(define (make-branch length structure)
(list length structure))

(define (left-branch mobile)
  (car mobile))
(define (right-branch mobile)
  (car (cdr mobile)))
(define (branch-length branch)
  (car branch))
(define (branch-structure branch)
  (car (cdr branch)))
_______________________________________________________________________
b.
(define (total-weight mobile)
  (cond ((null? mobile) 0)
        ((not (pair? mobile)) mobile)
        (else (+ (total-weight (branch-structure(left-branch mobile)))
                 (total-weight (branch-structure(right-branch mobile)))))))

test:
(define a (make-mobile (make-branch 1 3)(make-branch 2 5)))
(total-weight a)
8
________________________________________________________________________
c.
(define (torque branch)
  (*(total-weight (branch-structure branch))(branch-length branch)))
  
(define (balanced? mobile)
  (and (= (torque (left-branch mobile))(torque (right-branch mobile)))
       (balanced? (branch-structure left-branch mobile))
       (balanced? (branch-structure right-branch mobile))))

(balanced? a)
#f
________________________________________________________________________
d.
(define (make-mobile left right)
  (cons left right))
(define (make-branch length structure)
  (cons length structure))
  
#not much to change, only these two

(define (right-branch mobile)      
  (cdr mobile))
(define (branch-structure branch)
  (cdr branch))
