#fold-right
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))


(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
        result
        (iter (op result (car rest))
              (cdr rest))))
  (iter initial sequence))
  
(fold-right / 1 (1 2 3))
(/ (1 (f-r / 1 (2 3))))
(/ (1 (/ (2 (f-r / 1 (3)))))
(/ (1 (/ (2 (/ 3 1))))
1.5

fold-left / 1 (1 2 3)
iter 0 (1 2 3)
iter (/ 1 1) (2 3)
iter (1) (2 3)
iter (/ 1 2) (3)
iter (0.5) (3)
iter (/ 0.5 3) ('())
0.666

(fold-right list nil (list 1 2 3))
(1 (f-r list nil (2 3))
(1 (2 (f-r list nil (3))))
(1 (2 (3(()))))


(fold-left list nil (list 1 2 3))
(iter nil (list 1 2 3))
(iter (list nil 1 ) (list 2 3))
(iter (list (list nil 1) 2) (list 3))
(iter (list (list (list nil 1) 2) 3)) nil)
(list (list (list () 1) 2) 3))
(((() 1) 2) 3)

#observe how the processes evolve:
#fold-right is recursive, operates after cdring down, operates from right to left (expands then contracts)
#fold-left is iterative, operates while cdring down so left to right
#op needs to be such that the order of operand does not matter - commutative. e.g. + -
