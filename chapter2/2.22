# the first iteration cons 1st item to nil (answer has intial value of nil)
# second iteration puts cons the 2nd item to (list 1st nil)
# result is e.g. (... 3rd, 2nd, 1st, nil)

# interchanging the arguments to cons wont work either
# the first iteration cons nil to 1st item
# the second iteration cons (nil 1st) to 2nd item, creating a backwards sequence of nested pairs or a backwards list
# result is e.g. (((nil 1st) 2nd) 3rd)

(define (square x)
  (* x x))

(define (square-things things)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things) (cons answer
                                 (square(car things))))))
  (iter things '()))

display (square-things (list 1 2 3 4))
((((() . 1) . 4) . 9) . 16)
