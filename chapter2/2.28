#iterative approach

(define (fringe items)
  (define (fringe-iter items result)
    (cond ((null? items) result)     
          ((not(pair? items)) (cons items result))
          (else (fringe-iter (car items)
                             (fringe-iter (cdr items) result)))))                    
 (fringe-iter items '()))

display (fringe (list 1 2 (list 3 4)))

#a simple solution using append

(define (fringe items) 
  (cond ((null? items) items) 
        ((pair? items) (append (fringe (car items))(fringe (cdr items))))
        (else (list items))))                      
        
display (fringe (list 1 2(list 3 4)))
