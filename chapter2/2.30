(define (square-tree-1 tree)
  (cond ((null? tree)tree)
        ((number? tree)(* tree tree))
        (else (cons (square-tree-1 (car tree))
                    (square-tree-1 (cdr tree))))))
                    
#map iterates a procedure over all the elements of a list
#square-tree-2 uses map on sub-trees that are pairs

(define (square-tree-2 tree)
  (map (lambda (sub-tree)
               (if (pair? sub-tree)
                   (square-tree-2 sub-tree)
                   (* sub-tree sub-tree)))
                tree))

(define a (list 1 2 3 (list 5 6(list 7))))

(square-tree-1 a)
(square-tree-2 a)
