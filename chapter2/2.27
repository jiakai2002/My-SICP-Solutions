#for deep-reverse, we need to consider nested lists
#we can use pair? to check for a nested list
#then, we cons the reversed nested list to the next element in the main list

**(if (pair? (list-ref items n))
    (cons (reverse (list-ref items n)) (reverse-iter (- n 1)))
     ...)**

(define (length items)
    (define (length-iter a count)
        (if (null? a)
            count
            (length-iter (cdr a) (+ 1 count))))
    (length-iter items 0))

(define (reverse items)
  (define (reverse-iter n)
    (if (< n 0)
      '()
      (if (pair? (list-ref items n))
          (cons (reverse (list-ref items n)) (reverse-iter (- n 1)))
          (cons (list-ref items n) (reverse-iter (- n 1))))))
  (reverse-iter (- (length items) 1)))

display (reverse (list 1 2 3(list 4 5 (list 6 7))))
